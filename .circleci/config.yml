version: 2.1
defaults: &defaults
  working_directory: /tmp/persist_to_workspace
  docker:
    - image: cypress/base:14.19.0
      environment:
        ## this enables colors in the output
        TERM: xterm

jobs:
  checkout:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Clone GitOps
          command: |
            rm -rf GitOps
            mkdir -p ~/.ssh/
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git clone -b master git@github.com:GitJMSeguradora/GitOps.git
      - run: pwd
      - run: ls -lart
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}
      - run: yarn install --ignore-engines --network-concurrency 1
      - save_cache:
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - ~/.npm
            - ~/.cache
            - /root/.cache/
            - ~/.cache/yarn
      - persist_to_workspace:
          root: /tmp/persist_to_workspace
          paths:
            - .

  circleci-collector:
    <<: *defaults
    steps:
      - run:
          name: Circleci Collector
          command: |
            mkdir -p ~/.ssh/
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git clone -b master git@github.com:GitJMSeguradora/GitOps.git
            cp GitOps/circleci/workflows/collector/collector.sh .
            chmod +x collector.sh
            ./collector.sh
          no_output_timeout: 10m

  eslint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp/persist_to_workspace
      - run:
          name: EsLint
          command: |
            echo "Initialiazing App Lint"
            yarn nx run-many --all --target=lint
            echo "Done"
          no_output_timeout: 5m

  audit:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp/persist_to_workspace
      - run:
          name: Audit Packages
          command: |
            echo "Initialiazing packages audit"
            yarn audit
            echo "Done"
          no_output_timeout: 5m

  code-climate:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp/persist_to_workspace
      - run:
          name: Code Climate - Continuous Inspection and Build
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            node --expose-gc ./node_modules/.bin/nx run-many --all --target=test --codeCoverage=true --runInBand=true --coverageReporters=lcov --no-passWithNoTests --ci -w=1 --logHeapUsage
            cat $(find ./coverage/* -type f -name lcov.info) > lcov-total.info
            ./cc-test-reporter format-coverage -t lcov -o codeclimate.total.json lcov-total.info
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./cc-test-reporter upload-coverage -i ./codeclimate.total.json
          no_output_timeout: 5m

  scan-app:
    working_directory: /tmp/persist_to_workspace
    machine:
      image: ubuntu-2004:202101-01
    environment:
      TERM: xterm
      LC_ALL: C.UTF-8
      LANG: pt_BR.UTF-8
    steps:
      - attach_workspace:
          at: /tmp/persist_to_workspace
      - run:
          name: Scanning App
          command: |
            cp -r GitOps/circleci/workflows/security/* .
            chmod +x *.sh scan-app/*.sh
            ./scan-app.sh node
            echo "Done"
          no_output_timeout: 10m
      - store_artifacts:
          path: /tmp/persist_to_workspace/scan-app/reports
          destination: scan-app-reports

  e2e_tests:
    <<: *defaults
    parameters:
      environment:
        description: Environment to e2e tests to
        type: string
    resource_class: gitjmseguradora/k8s-qas
    #parallelism: 5
    steps:
      - attach_workspace:
          at: /tmp/persist_to_workspace
      - run:
          name: Instaling packages
          command: |
            apt-get update -qq
            apt-get install -qq build-essential awscli python3-pip software-properties-common apt-transport-https jq sudo libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
            pip3 install --upgrade awscli
      - run:
          name: E2E Tests
          command: |
            # Executando Testes
            ./node_modules/cypress/bin/cypress install
            npm install --no-optional --unsafe-perm
            npm rebuild node-sass
            yarn nx affected:e2e -c=quality --base=master --head=HEAD
          no_output_timeout: 40m
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: /tmp/persist_to_workspace/dist/cypress/apps/fidelize-e2e/screenshots
      - store_artifacts:
          path: /tmp/persist_to_workspace/dist/cypress/apps/plataforma-e2e/screenshots
      - store_artifacts:
          path: /tmp/persist_to_workspace/dist/cypress/apps/vendors-e2e/screenshots

  deploy-cf:
    <<: *defaults
    parameters:
      environment:
        description: Environment to Deploy to
        type: string
    steps:
      - attach_workspace:
          at: /tmp/persist_to_workspace
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}
            - yarn-packages-v1
      - run:
          name: Building to << parameters.environment >> Environment
          command: |
            echo "Initialiazing pre-build << parameters.environment >>"
            cp .circleci/scripts/pre-build.sh .
            chmod +x ./pre-build.sh
            ./pre-build.sh << parameters.environment >>
            echo "Done"

            echo "Initialiazing build << parameters.environment >>"
            ENV=<< parameters.environment >>

            case "${ENV}" in
            quality)
              yarn affected:build --configuration=quality --base=${CIRCLE_BRANCH}~1 --head=$CIRCLE_BRANCH --maxWorkers=1 --memoryLimit=1024 --skip-nx-cache
            ;;
            staging)
              yarn affected:build --configuration=production --prod --base=master~1 --head=master --maxWorkers=1 --memoryLimit=1024 --skip-nx-cache
            ;;
            production)
              yarn affected:build --configuration=production --prod --base=master~1 --head=master --maxWorkers=1 --memoryLimit=1024 --skip-nx-cache
            ;;
            *)
              echo "Invalid Options. Try: quality, staging or production"
            ;;

            esac
            echo "Done"
          no_output_timeout: 5m

      - deploy:
          name: Cloudfront+S3 - Pushing to << parameters.environment >> Environment
          command: |
            echo "Initialiazing deploy CF+s3"
            cp .circleci/scripts/deploy.sh .
            chmod +x ./deploy.sh
            ./deploy.sh << parameters.environment >>
            echo "Done"
          no_output_timeout: 5m
      - persist_to_workspace:
          root: /tmp/persist_to_workspace
          paths:
            - .

  create-release:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp/persist_to_workspace
      - run:
          name: Create Release
          command: |
            echo "Done"
          no_output_timeout: 5m

orbs:
  jira: circleci/jira@1.3.1

workflows:
  version: 2.
  workflow-project:
    jobs:
      - checkout:
          context: GitJMSeguradora
          filters:
            tags: { ignore: '/.*/' }
      - circleci-collector:
          context: GitJMSeguradora
          filters:
            tags: { ignore: '/.*/' }

      - eslint:
          context: GitJMSeguradora
          filters:
            branches: { ignore: 'master' }
            tags: { ignore: '/.*/' }
          requires:
            - checkout
      - audit:
          context: GitJMSeguradora
          requires:
            - checkout
      - code-climate:
          context: GitJMSeguradora
          filters:
            tags: { ignore: '/.*/' }
          requires:
            - checkout
      - scan-app:
          context: GitJMSeguradora
          filters:
            branches: { ignore: 'master' }
            tags: { ignore: '/.*/' }
          requires:
            - checkout

      - approve-qas:
          type: approval
          filters:
            branches: { ignore: 'master' }
            tags: { ignore: '/.*/' }
      - deploy-cf:
          name: deploy-cf-qas
          context: GitJMSeguradora
          environment: quality
          filters:
            branches: { ignore: 'master' }
            tags: { ignore: '/.*/' }
          requires:
            - approve-qas
            - eslint
            # - audit
            - code-climate
          post-steps:
            - jira/notify:
                environment: qas
                environment_type: development
                job_type: deployment

      - e2e_tests:
          environment: quality
          filters:
            branches: { ignore: 'master' }
            tags: { ignore: '/.*/' }
          context: GitJMSeguradora
          requires:
            - checkout
            - deploy-cf-qas

      - approve-stg:
          type: approval
          filters:
            branches: { only: 'master' }
            tags: { ignore: '/.*/' }
      - deploy-cf:
          name: deploy-cf-stg
          context: GitJMSeguradora
          environment: staging
          filters:
            branches: { only: 'master' }
            tags: { ignore: '/.*/' }
          requires:
            - approve-stg
            - eslint
            # - audit
            - code-climate
          post-steps:
            - jira/notify:
                environment: stg
                environment_type: testing
                job_type: deployment

      - approve-prd:
          type: approval
          filters:
            branches: { only: 'master' }
            tags: { ignore: '/.*/' }
          requires:
            - approve-stg
      - deploy-cf:
          name: deploy-cf-prd
          context: GitJMSeguradora
          environment: production
          filters:
            branches: { only: 'master' }
            tags: { ignore: '/.*/' }
          requires:
            - approve-prd
            - deploy-cf-stg
          post-steps:
            - jira/notify:
                environment: prd
                environment_type: production
                job_type: deployment

      - create-release:
          context: GitJMSeguradora
          requires:
            - deploy-cf-prd
          filters:
            branches: { only: 'master' }
            tags: { ignore: '/.*/' }
# VS Code Extension Version: 1.5.1
